-----Basics-----
!! - last command
!$ - last argument
![index] - command from history
history - view history
bash - start new prompt
su $user - switch user | 'su -' - go into login prompt

-----IP commands-----
ip link - view network interfaces
ip a - show IP addresses for each interface
ip -c a - show IP addresses color-coded
ip -4 a - show only IPv4 addresses
sudo ip link set dev $INTERFACE (up/down) - bring interface up or down
ip r - show IP routing table
ip n - neighbour devices with their IP addresses linked to their MAC addresses (replacement for 'arp'
command)
ip netns - list kernel's IP netspaces (used for virtualization - you can use
 them with virtual intefaces ONLY, not with the physical interfaces)
ip a s $INTERFACE - show addresses for interface specified
ip addr add (ip a a) $ADDRESS dev $INTERFACE - add an IP address for a device
ip addr delete $ADDRESS dev $INTERFACE - remove an IP address from device
ip a s $INTERFACE - show addresses for interface specified
ip addr add (ip a a) $ADDRESS dev $INTERFACE - add an IP address for a device
ip addr delete $ADDRESS dev $INTERFACE - remove an IP address from device



loopback interface is used when the system needs to point to itself, ex. local servers, databases, etc.
Loopback interface has a hostname resolution of 'localhost' pointed to it.
127.0.0.1 (loopback interface address) - IPv4 localhost
::1 - IPv6 localhost

ip -4 a - show only IPv4 addresses
enp0s3 - PCI BUS 0 slot 3

10.0.2.21/24 in CIDR (Classless Inter-Domain Routing) notation means that network has 24 bit subnet mask
Network 10.0.2
Node .21
First 24 bits make up the network and last 8 make up the host


-----Hostnames-----
sudo ip netns add $NAME - create namespace
hostnamectl - view hostname properties
hostnamectl set-hostname $HOSTNAME - the new way to change hostname

sudo hostname $HOSTNAME - change hostname (you need to change it also in /etc/hostname and
/etc/hosts file for the change to be persistent)

Different ways to view hostname:
echo $HOSTNAME
hostname
cat /etc/hostname
hostnamectl
hostname -f - for Fully Qualified Domain Name

hostname division:
host | hostname | "$PRETTY_NAME"

hostnamectl set-hostname "$PRETTY_NAME" - set pretty name
pretty hostname is being stored in /etc/machine-info file

Hostname needs to be change via 'hostname' command, in '/etc/hostname' file and in '/etc/hosts'.
Hosts file contains FQDNs (Fully-Qualified Domain Names) as well as pretty names and aliases
You need to open new prompt (session) every time you change hostname for the change to take effect

You can add multiple aliases in hosts file for each FQDN
192.168.0.102 server1.example.com server1 s1
^ip address   ^FQDN		  ^alias  ^alias


-----DNS (Domain Name System) config-----
Avahi software lets you view Multicast DNS devices on your network

getent $ENTRY - get entries related to string (note that these entries are taken from local directories
and may not present the actual state of configuration that may be assigned dynamically/from a network)

/etc/nsswitch.conf - Name Service Switch config - a file in which the order of name discovery
is laid out for each database, ex. DNS entry is:
'hosts:	files dns'.
It means that domain names are taken from the hosts
file in local files first and then from the DNS service)

/etc/resolv.conf file contains DNS resolution configuration for local host. It is
automatically created by NetworkManager. 'nameserver 192.168.0.1' line tells us
that the local host is reaching out to the router (the network address) for the
DNS configuration. We can edit it manually to reach out to specific DNS servers for
name server configuration

dig $DOMAIN - Domain Information Groper - returns information about DNS for specific domain
(comes in handy in debugging DNS)
dig $DOMAIN $DNS_SERVER(ex. 8.8.8.8) - forces the packet to go through DNS specified
dig +short $DOMAIN $DNS - gives the same information, but simplified to only IP addresses
dig +short $DOMAIN $DNS MX  - gives mail exchange records for domain specified via DNS specified

 
-----NTP (Network Time Protocol)-----
Linux Time is divided into hardware clock and system time. They should be synchronized with
each other as well as with local real time. Using network services to synchronize system clock
doesn't do the same with the hardware clock. The hardware clock's accuracy is actually determined by
CPU clock speeds. The hardware clock keeps track of time and provides synchronization
mechanisms for all the running processes. It provides a uniform scale of measurement.

date - show current system clock date and time
sudo date --set="$YYYY$MM$DD $H:$M" - set current system time
sudo hwclock - show current hardware clock date and time
sudo hwclock --systohc - synchronise system clock to hardware clock
sudo hwclock --hctosys - synchronise hardware clock to system clock
timedatectl - show time and date info
timedatectl list-timezones - see timezone list
sudo timedatectl set-timezone $CONTINENT/$CITY - set desired timezone for the system
sudo timedatectl set-time "$YYYY-$MM-$DD $HH:$MM:$SS" - set current system time (automatic time
synchronization has to be disabled for this to work"
sudo timedatectl set-ntp $boolean - toggle automatic time synchronization. Time synchronization
daemon has to be installed for this to work.
timedatectl show-timesync - show NTP synchronization servers
timedatectl timesync-status - show NTP synchronization details

systemd-timesyncd is a time synchronization daemon that works with systemd.
/etc/systemd/timesyncd.conf file contains configuration for timesyncd. Uncomment and add servers
to line starting with "NTP=" if you want specific timeservers to be used with timesyncd. 
After editing timesyncd settings, you should restart systemd-timesyncd service for the changes
to take effect.

chronyd service is a time synchronisation daemon which can synchronise time with NTP servers,
reference clocks like GPS receiver and manual input using wristwatch and keyboard via chronyc
chronyc is a CLI-based program designed to monitor and configure chronyd daemon
/etc/chrony.conf file contains time synchronization config for chronyd

chronyc tracking - shows sychronisation server and synchronisation details
chronyc sources - shows all servers you can synchronise to using chronyc
NTP uses UDP port 123 to sychronise time. Both chronyd daemon and NTP daemon use this port to
synchronise time via NTP, so one of them should be disabled to not interfere with the other

ntpd (NTP Daemon) is another time synchronization utility you can use with systemd.
/etc/ntp.conf file contains configuration for NTP Daemon

systemctl list-units - shows all services currently loaded into systemd memory to check if system
uses chronyd, systemd-timesyncd or ntpd

-----NetworkManager-----


nmcli is a CLI version of NetworkManager.

sudo nmcli device reapply $DEVICE - reapply device's connection after alterations
sudo nmcli connection show - list connections
sudo nmcli connection add con-name $NAME ifname $INTERFACE type ethernet ip4 $IP gw4 $GATEWAY - 
sudo add a new connection for the interface specified
sudo nmcli connection up $INTERFACE - enable interface specified
sudo nmcli connection down $INTERFACE - disable interface specified
sudo nmcli connection modify $INTERFACE autoconnect yes - make connection run at startup
sudo nmcli connection modify $INTERFACE +ipv4.routes "$IP/$SUBNET $IP" - add a route to the routing
table. After adding the route you need to reapply settings. You can use "-" instead of "+" to delete
the route.

/etc/sysconfig/network-scripts/ directory contains ifcfg config files for all current NetworkManager
connections

-----Netplan-----
Netplan utility is Ubuntu's front-end for systemd_networkd service. It's configuration files are
located in /etc/netplan/*.yaml

sudo netplan try (--timeout $SECONDS) - try new network connection settings with a timer so you can 
revert if you lose connectivity to a remote server  
sudo netplan apply - apply new network connection settings permanently
netplan get - print interface configuration from netplan config file
/usr/share/doc/netplan/examples folder contains example Netplan configurations, including bonding
and bridging

/etc/systemd/resolved.conf file contains global DNS configuration. You need to restart
systemd-resolved.service for changes you make in that file to take effect.

'ss' (socket statistics) command shows current connections or listeners on sockets
sudo ss -ltunp - (listening TCP UDP numeric process) - show listening sockets with numeric (IP:port)
values with their corresponding process names

-----Bridges and Bonds-----
Bridging lets you create a bridge between two networks, so devices can communicate through them

Bonding, opposed to bridging a network, lets you treat two or more network cards as one, so they
can be load balanced or have better throughput.

Bonding in Linux works in one of 7 different modes:
Mode 0 (Round-robin) - uses NICs in sequential order. For a certain amount of data NIC 1 is used and
for a certain amount of data NIC 2 is used.
Mode 1 (active-backup) - uses one interface active, and other inactive as backups
Mode 2 (XOR) - source and destinations form pairs that always go through a specified interface
Mode 3 (Broadcast) - all data is sent through all interfaces at once
Mode 4 (IEEE 802.3ad) - increases throughput to more than a single interface can support
Mode 5 (Adaptive Transmit Load Balancing) - load balances outgoing traffic, transfers data through
NIC that is the least busy
Mode 6 (Adaptive Load Balancing) - load balances outgoing and ingoing traffic
In bond, all network interfaces are called "ports"

When a bond is created by Netplan, it's configuration is located in /proc/net/bonding/$BOND_NAME

-----UFW FIREWAL-----
UFW (Uncomplicated Firewall) utility is a port-based firewall that lets you manage IP rules easily.
Rules in UFW, the same as in iptables, are applied in order.

sudo ufw status verbose - check if UFW is filtering. 'verbose' option lets you see current policies.
sudo ufw status numbered - check current policies in order they are applied
sudo ufw $(allow/deny) $PORT - allow or deny incoming connections to a port through UFW on both TCP
and UDP protocols
sudo ufw $(allow/deny) $PORT/$(tcp/udp) - allow or deny incoming connections to a certain port 
through either TCP or UDP
sudo ufw allow from $IP to $IP(any) port $PORT - allow incoming connection from specified IP to
specified (or any) IP on the machine on a port specified
sudo ufw enable - enable UFW filtering
sudo ufw delete $NUMBER - delete policy with number specified
sudo ufw delete $(allow/deny) $PORT - delete all matching rules for port specified
sudo ufw insert $NUMBER $REST_OF_RULE - insert a rule on a number specified and push all rules below
this number down one spot
sudo ufw $(allow/deny) out $REST_OF_RULE - allow or deny an outgoing connection 

You can allow a range of IPs by adding a network address in a CIDR (Classless Inter-Domain Routing)
notation. This will allow an entire CIDR block

-----FirewallD------

FirewallD is a Linux Firewall, which manages rules in zones. Said zones contain specific
set of rules for, for example Trusted Zone through which traffic goes by default, another, Zone 
configured for specific NIC to be used with with less trust and so on.

firewall-cmd --get-default-zone - check the default zone
sudo firewall-cmd --set-default-zone=$NAME - set FirewallD's default zone
sudo firewall-cmd --list-all - list all FirewallD rules
sudo firewall-cmd --info-service=$NAME - view port number for service from list
sudo firewall-cmd --add-service=$NAME (or sudo firewall-cmd --add-port=$PORT/$(tcp/udp)) - allow
a service or port number through the firewall
sudo firewall-cmd --remove-service=$NAME (or sudo firewall-cmd --remove-port=$PORT/$(tcp/udp) -
remove service or port from allowed rules
sudo firewall-cmd --add-source=$IP/$SUBNET --zone=$ZONE - add certain source network/IP into a zone
firewall-cmd --get-active-zones - see current active zones
sudo firwall-cmd --remove-source=$IP/$SUBNET --zone=$ZONE - remove source ip from the zone

FirewallD rules added using commands are not permanent. To make them permanent you can use 
"sudo firewall-cmd --runtime-to-permanent" command or add "--permanent" argument when adding a rule.
Remember though that "--permanent" argument makes the rule permanent but not active for current
session and using the command without this argument makes the rule not permanent, but active for
current session.

-----Routing------

sudo ip route add $IP/$SUBNET via $IP dev $DEVICE - add static route to routing table
sudo ip route del $IP - delete static route from routing table
sudo ip route add default via $IP - add Default Gateway route

The Default Gateway route is used when no other route to the destination is specified in the routing
table.

Routes added by the IP command are temporary. You can use NetworkManager to set the routes permanently. 
