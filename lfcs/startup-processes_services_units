init - initialization system

Units - text files that describe necessary logic for init

Units are divided into:
Service Units ('*.service') - manage system services (deamons), ex. web servers, custom applications that 
use '.service' units
Socket Units ('*.socket') - manage inter-process communication (IPC) sockets. Used to start services on-
demand when traffic is detected on a socket. This could be a network socket or local file socket.
Device Units ('*.device') - Represent various devices on the system. They are created automatically for
each device present in the system, often used to specify ordering dependencies with services.
Mount Units ('*.mount') - Control mount points in the filesystem.
Automount Units (*.automount) - Handle on-demand mounting of filesystems. They are responsible for
mounting specific filesystem when accessing its corresponding directory
Timer Units ('*.timer') - Trigger activation of other units based on timers. Used with scheduled tasks
like daily backups of regular system scans
Path Units ('*.path') - Activate other units when file or directory changes are detected, ex. starting
a services when a particular file exists or changes.
Slice Units ('*.slice') - Manage system resources for a group of units, ex. controlling the distribution
of CPU and memory resources among services.
Scope Units ('*.scope') - Manage externally created processes not initiated by systemd, but managed through
it once they're running.

Unit files are typically located in:
/etc/systemd/system/
/run/systemd/system/
/lib/systemd/system/

/etc/systemd/system/ is a location for user-defined or customized units.

Systemctl is a program for administration of systemd service, unit, timer and boot management.

sudo systemctl cat $SERVICE.service - cat loaded service file
sudo systemctl edit --full $SERVICE.service - edit service file
sudo systemctl revert $SERVICE.service - revert changes made to a service file
sudo systemctl status $SERVICE - check service's status

Systemctl status check shows you PID of a process and some of the logs generated by this process. PID
is a unique process identifier that differentiates processes from each other.

sudo systemctl stop $SERVICE - stop a process related to service
sudo systemctl start $SERVICE - manually start a service
sudo systemctl restart $SERICE - manually restart a service

You will need to manually restart some services to apply configuration changes made to a config file.

sudo systemctl reload $SERVICE - reload service settings without completely restarting it. Softer version
of restart that doesn't stop the service in the process. Sometimes reload isn't enough, but you can
always check if it works for you first and then do a restart if it isn't enough to apply your new
config successfully. You can also relegate making this choice to systemctl by using 'sudo systemctl
reload-or-restart $SERVICE' command.

sudo systemctl disable $SERVICE - disable service autostart with boot
sudo systemctl enable $SERVICE - enable service autostart with boot
sudo systemctl is-enabled $SERVICE - check if service's autostart is enabled
sudo systemctl enable $SERVICE - enable a service. Add '--now' argument to also start it at the same time.
sudo systemctl disable $SERVICE - disable a service. Add '--now' argument to also stop the service.
sudo systemctl mask $SERVICE - hide a service and make it impossible to control until unmasked.
sudo systemctl unmask $SERVICE - unmask a service.
sudo systemctl list-units --type service --all - list all system services.

man systemd.service - look for all systemd service options when writing a .service file.

'.service' unit instructs init system how to start a daemon and how to keep it running.

When creating your own daemon service, you should create a .service file in /etc/systemd/system. It's wise
to copy another service file and edit it according to your needs. 

The following instructions are taken from SSH Daemon .service file, the other .service files may differ in
options, but the rules are the same.

in '[Unit]' section:
'Description=' option is self-explanatory
'Documentation=' option specifies man pages for your service
'After=' option specifies after which service (or set of services - .target) should the service start
'ConditionPathExists=' option tells service to start only when a path specified exists


in '[Service]' section:
'EnvironmentFile=' option loads environment variables from the file specified
'Restart=' option tells systemd to restart application at condition specified.
'RestartSec=' option specifies delay after which the app will be restarted. Prevents restart loops.
'ExecStartPre=' option tells unit to execute command or script before starting service.
'ExecStart=' option tells unit to execute command or script on service start. This option starts your
application when you specify a command or a shell script file.
'ExecReload=' option specifies what shall be executed when an administrator issues a 'systemctl reload'
command
'KillMode=' option specifies how the application should be stopped when an admistrator issues a 'systemctl
stop' command. 'process' option tells systemd to only kill the main process and not child processes. If
you specify 'control-group', the command will kill all processes created by this service.
'Restart=on-failure' option tells systemd to only restart the application on failure, meaning the
application stopped returning a non-zero exit code
'RestartPreventExitStatus=' option tells systemd to not restart the service if the application returns an
exit code specified
'Type=notify' option tells systemd that the application will notify it when it's finished starting up. The
application must be coded to do so to make this option applicable. If your application doesn't support such
functionality and doesn't need to run in the background change type to 'simple'. Another option is 'forking'
which is made for apps that spawn many child processes.
'RuntimeDirectory=' specifies a relative path that application should run in
'RuntimeDirectoryMode=' specifies permissions for that relative directory. This could be useful in need of
the app to be creating temporary files.

in '[Install]' section:
'WantedBy=' option specifies target in which the application should work. Select 'multi-user.target' to let
application run in terminal-only sessions. To check out more targets, see 'operating-modes_grub' file.
'Alias=' option creates a symlink in /etc directory

Whenever you create a new systemd service, you need to reload systemd daemon using
'sudo systemctl daemon-reload' command.

'sudo journalctl -f' to see syslog in real time

You can always check systemd options for each unit (not only .service) by typing 'man systemd.$UNIT_TYPE'.

