LVM (Logical Volume Manager) lets you use free space from different portions o a disk, or use multiple individual
disks and combine them into what system sees as one regular continuous partition. It also allows flexibility with
resizing. lvm2 package will let you manage LVM partitions. There are some abbreviations associated with LVMs. 
Most of the LVM commands are going to start with these abbreviations, so its best to memorize them.

PV - Physical Volume - Theses represent real storage devices that LVM will work with. PV will often consist of a
whole disk or Solid State Drive. Sometimes a PV could also be a partition. To see what PVs there are on the system,
use "sudo lvmdiskscan". To create a PV, use "sudo pvcreate $BLOCKDEVICE" command. To see what Physical Volumes are
currently attached to LVM, use "sudo pvs" command. PSize shows total PV size and PFree shows how much of unpartitioned
space there is on the PV. To tell LVM how to use certain PVs, you should attach them to a VG (Volume Group). 

VG - Volume Group - You can think of a Volume Group like a Virtual Disk inside of LVM. Once you add PVs to a VG, they
will be seen as one continuous volume. This is useful, because you can keep growing your VG indefinitely by adding
more disks to the server and adding them to this volume group. By doing this, you can expand your server's storage
without ever needing to power off the server. To create a VG, use "sudo vgcreate $VGNAME $PV1 $PV2(..)" command. To
add new PV, to the Volume Group, first create PV from it by issuing "sudo pvcreate $BLOCKDEVICE" command and then
using "sudo vgextend $VGNAME $PV1 $PV2(..)". To see your changes, view volume groups using "sudo vgs" command. To
remove PV from VG, use "sudo vgreduce $VGNAME $PV". If you don't use PV anymore, you can remove it from LVM by using
"sudo pvremove $PV" command. 

LV - Logical Volume - VG you have is not partitioned yet. To change it, you need to add an LV. LV is similar to a
partition, but for an LVM. To create a Logical Volume, you should use "sudo lvcreate --size $SIZE --name
$PARTITIONNAME $VG" command. To list LVs, use "sudo lvs" command. To view LV's path, so you can reference it in
commands or scripts, use "sudo lvdisplay" command. After creating an LV, you will have to create a filesystem on it
using classic mkfs syntax. To resize an LV with filesystem already created on it, use "sudo lvresize --resizefs
--size $SIZE $VG/$LV" command, because without using "--resizefs" argument, the LV will resize and the filesystem on
it will still use the space it used before.

PE - Physical Extent - Data in LVM is divided into multiple pieces called Physical Extents. Extents work like blocks
in a traditional partitioned disk in a way, but they are of bigger sizes. To use all available PEs on VG for an LV,
use "sudo lvresize --extents 100%VG $VG" command. To resize LV to a size you want, use "sudo lvresize --size $SIZE
$VG/$LV" command. 


To encrypt a storage in Linux, you can use utility called CryptSetup. It supports two modes of encryption - plain and
LUKS. LUKS stands for Linux Unified Key Setup. Plain mode just takes all data and encrypts it with user's passphrase. 
The simplest way to set up a disk to be encrypted in plain mode is "sudo cryptsetup --verify-passphrase open --type
plain $DEVICE $NAME". As it's not neccessary to use "--verify-passphrase" argument, it's highly recommended to do
so, as in plain mode, CryptSetup has no idea if you type in a wrong password, which can end up corrupting your device's
data. "open" option tells CryptSetup to open the drive for reading and writing encrypted data. "--type plain" is an
argument for "open" option and tells CryptSetup to use plain encryption scheme. With a name you choose, you'll find
your device created at /dev/mapper/$NAME. To programs on Linux, /dev/mapper/$NAME looks just like any other block
device. After setting up the encrypted partition, you can make a filesystem on it using "sudo mkfs.$FILESYSTEM
/dev/mapper/$NAME" command and mount it using "sudo mount /dev/mapper/$NAME $MOUNTPOINT". Your encrypted disk at
/dev/mapper/$NAME is seen by programs as normal disk. When a program needs to write to your disk, Linux takes the data
pointed for /dev/mapper/$NAME disk, encrypts it and writes it to the original block device at /dev/$NAME. Exactly the
same happens when an application reads from your encrypted disk. Linux takes the encrypted data from /dev/$NAME,
decrypts it, and sends it to application on /dev/mapper/$NAME device. Data is still visible as is on /dev/mapper/$NAME,
but all read and write operations happen with encryption and decryption on the fly. This, however, opens a security
vulnerability. As the /dev/mapper/$NAME disk is open, encrypted data from /dev/$NAME is visible on /dev/mapper/$NAME.
To close encrypted disk, first unmount it by using "sudo umount $MOUNTPOINT" command and then close it using "sudo
cryptsetup close $NAME". If the mapping device is closed, the data is 100% encrypted and safe.

To create LUKS-encrypted disk, first format it with "sudo cryptsetup luksFormat $BLOCKDEVICE". The device only has to
be formatted for LUKS once. In LUKS, changing the passphrase is way easier than in plain scheme. In plain scheme, you 
have to re-encrypt all the data on device, but in LUKS you can just use "sudo cryptsetup luksChangeKey $DEVICE". To 
open your formated disk with LUKS, use "sudo cryptsetup open $DEVICE $NAME". LUKS knows when a wrong password is typed,
so you don't need to type it twice. When opening a LUKS-formated device, you don't need to specify type, because when 
formatting disk for LUKS, CryptSetup writes a small header block to the device, which contains information about it
being a LUKS-formatted disk type. Then you can make a filesystem on your /dev/mapper/$NAME device by using "sudo
mkfs.$FILESYSTEM /dev/mapper/$NAME" command. To close the mapping device, you can use the same "sudo cryptsetup close
$NAME". 


With RAID, you can take multiple storage devices and combine them into single storage area. Combination of two or more
disks in a RAID is called an array. 
Level 0 RAID  (or striped array) - A bunch of disks are grouped in a Level 0 RAID and then Linux sees them as a single
storage area. The total usable space is equal to sum of all devices. Level 0 RAID is not redundant, meaning If you 
lose one disk, the data on the entire array is lost.
Level 1 RAID (mirrored array) - When a file is written to this array, it's cloned to all disks in it. This ensures no
data loss in case of some disks malfunctioning.
Level 5 RAID (minimum 3 disks) - When you read a file from one disk and it malfunctions, the file will still be saved,
because RAID 5 array will keep something called parity on each disk. Parity is like a small backup, which can help
rebuild data loss. At level 5, there's a constant 1TB space of parity saved across another disks, so exactly one
1-terabyte disk can be rebuilt if it's lost.
Level 6 RAID (minimum 4 disks) - Same as level five, but two disks can be lost and rebuilt from parity
Level 10 (1+0) RAID - Combination of Level 1 and Level 0.  There are two Level 1 mirrors combined to have exactly half
usable space as the sum of all disks would have. Each two mirrored disks are combined with the other two mirrored disks.

If you have any LVM volumes on your disk, you should remove them before proceeding with creating RAID on these devices.
Firstly, remove Volume Group linked to these devices and then remove Physical Volumes.
sudo vgremove --force $VG
sudo pvremove $PV1 $PV2(..)

"mdadm" utility is used to manage RAID devices.
sudo mdadm --create $ARRAY_DEVICE --level=$LEVEL --raid-devices=$DISKSNUMBER $BLOCKDEVICE1 $BLOCKDEVICE2 (...), ex.
sudo mdadm --create /dev/md0 --level=0 --raid-devices=3 /dev/vdc /dev/vdd /dev/vde

Then you can make filesystem on your newly created created RAID device by using "sudo mkfs.$FILESYSTEM $RAIDDEVICE"
command. To disable deactivate an array, use "sudo mdadm --stop $RAIDDEVICE" command. When Linux boots up, it scans
superblock of all devices. By doing so, it checks if a device belongs to a RAID array. If so, it then reassembles the
array and assigns it a device on /dev/md$1-7. To avoid such behavior, you can wipe the superblock of these devices by
using "sudo mdadm --zero-superblock $BLOCKDEVICE1 $BLOCKDEVICE2(..)". You can add a spare device for an array, which will
replace a disk in array if it breaks by  adding "--spare devices=$NUMBER $BLOCKDEVICE1 $BLOCKDEVICE2(..)" to your "mdadm
create..." command. To add a disk to an existing array, use "sudo mdadm --manage $RAIDDEVICE --add $BLOCKDEVICE". To
remove a device from the array, just replace "--add" with "--remove". File /proc/mdstat contains information on RAID
arrays and devices they consist of that are currently on your system.
